<!DOCTYPE html>
<html lang="en">
<head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>WebSocket Client</title>
<script defer type="module">
// #region IMPORT
import WebClient    from './WebClient.js';
import StateProxy   from './StateProxy.js';
// #endregion

// #region MAIN
const App = {
    client : new WebClient(),
    state  : new StateProxy( { 
        isActive    : false,
        usrColor    : '',
        usrId       : '8aaab890-0efc-4816-b1a3-87cc2c09e700',
    } ),
};

const GetElm  = ( id )=>document.getElementById( id );
const OnClick = ( id, fn )=>GetElm( id ).addEventListener( 'click', fn );

const sendJson = ( json )=>{
    if( !App.client.isOpen ){
        console.log( 'NOT CONNECTED' );
        return;
    }

    App.client.sendJson( json );
};

// create job - { op:'create_job' jobID: ”the-job-id”, status: ”SUCCESS” }

window.addEventListener( 'load', ()=>{
    OnClick( 'btnConnect', ()=>App.client.isOpen ? App.client.disconnect() : App.client.connect() );
    OnClick( 'btnTest', ()=>sendJson( { op:'create_job' } ) );

    // TESTING
    // renderUserList( [{"userId":"8aaab890-0efc-4816-b1a3-87cc2c09e700","color":"#5bff00"}] );
});
// #endregion

// #region LOGIC

const ROUTES = {
    'register': ( json )=>{
        console.log( '---User Registered', 'color', json.color, 'userId', json.userId );
        App.state.usrColor = json.color;
        App.state.usrId    = json.userId;
    },

    'create_job': ( json )=>{ GetElm( 'lblJob' ).textContent = `${json.status} :: ${json.jobID}`; },

    'user_list': ( json )=>renderUserList( json.list ),
}

// #endregion

// #region EVENT BINDING

// When client changes its active state when it connects or disconnects
App.client.on( 'active', e=>{ 
    App.state.isActive = e.detail;

    // If connection has been established, register user
    if( e.detail ){
        App.client.sendJson( { op:'register' } );
    }else{
        renderUserList();
    }
} );

// When a new message is sent from server
App.client.on( 'message', e=>{
    const op = ROUTES[ e.detail.op ];
    if( op ) op( e.detail );
} );

// When the connection state changes
App.state.$.on( 'isActive', e=>{ 
    GetElm('btnConnect').textContent = e.detail ? 'Disconnect' : 'Connect';
});

// #endregion

// #region RENDERS

function renderUserList( list ){
    const ul = GetElm( 'lstUsers' );
    ul.replaceChildren(); // ul.innerHTML = ''; // Clear html

    // Recreate the list of users
    if( list ){
        let li;
        for( let i of list ){
            li                          = document.createElement( 'li' );
            li.textContent              = ( i.userId != App.state.usrId )? i.userId : 'ME';
            li.style.backgroundColor    = i.color;
            ul.appendChild( li );
        }
    }
}

// #endregion

</script></head><body>
<style>
    body{ background-color:#212121; color:#c0c0c0; font-family:monospace; }
    hr{ width:100%; border-style:dashed; border-color:#707070; }
    button{ border:1px solid #505050; background-color:#303030; color:#b0b0b0; border-radius:3px; padding:4px 0px; }
    button:active{ background-color:#404040; }
    h3{ margin:0px; text-align:center; }
    ul{ margin:0px; padding:0px; list-style-type:none; }
    li{ white-space: nowrap; overflow:hidden; text-overflow: ellipsis;
        margin: 4px 0px; padding: 4px 6px; border-radius:4px;
        color:#212121; font-size:1.1em;
    }

    .container{ width:600px; height:400px; 
        border:1px solid #707070; margin:auto auto;
        display: flex;
        flex-direction:row;
        box-sizing: border-box;
    }

    .container > main{ flex: 1 1 auto; display:flex; overflow:hidden; }
    .container > aside{ 
        flex: 0 0 150px; width:150px; padding:10px 10px 10px 0px;
        border:0px solid red; 
        display:flex; flex-direction:column; 
        box-sizing: border-box;
    }

    .lblWrap{ word-wrap: break-word; word-wrap: break-all; text-align:center; }

    canvas{ border:1px solid #707070; flex:1; margin:10px; box-sizing: border-box; min-width:100px;  }
</style>

    <div class="container">
        <main>
            <canvas></canvas>
        </main>
        <aside>
            <button id="btnConnect">Connect</button>
            <hr>
            <button id="btnTest">Create Job</button>
            <div id="lblJob" class="lblWrap">No Jobs</div>
            <hr>
            <h3>User List</h3>
            <ul id="lstUsers"></ul>
        </aside>
    </div>

</body></html>